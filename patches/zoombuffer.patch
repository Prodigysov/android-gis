--- src/com/mgmaps/utils/Tools.java	2009-11-26 17:40:10.000000000 +0100
+++ src/com/mgmaps/utils/Tools.java	2010-10-18 13:59:47.000000000 +0200
@@ -373,11 +375,11 @@
    *          logarithmic scaling level (1 = scale by 2, 2 = scale by 4, etc.)
    * @return the scaled image
    */
-  public static Image scaleImage05(final Image src, final int dif) {
+  public static Image scaleImage05(final Image src, final double dif) {
     final int srcWidth = src.getWidth();
     final int srcHeight = src.getHeight();
-    final int dstWidth = srcWidth >> dif;
-    final int dstHeight = srcHeight >> dif;
+    final int dstWidth = (int) Math.ceil(srcWidth / Math.pow(2, dif));
+    final int dstHeight = (int) Math.ceil(srcHeight / Math.pow(2, dif));
 
     //TODO jaanus : this should actually be handled somewhere outside
     if (dstWidth == 0 || dstHeight == 0) {
@@ -394,11 +396,11 @@
      * http://www.cs.helsinki.fi/group/goa/mallinnus/lines/bresenh.html
      */
     for (int x = 1; x < dstWidth; x++) {
-      srcPos[x] = x << dif;
+      srcPos[x] = (int) Math.floor(x * Math.pow(2, dif));
     }
 
     for (int y = 0; y < dstHeight; y++) {
-      src.getRGB(lineRGB, 0, srcWidth, 0, y << dif, srcWidth, 1);
+      src.getRGB(lineRGB, 0, srcWidth, 0, (int) Math.floor(y * Math.pow(2, dif)), srcWidth, 1);
       for (int x = 1; x < dstWidth; x++) {
         // skip pixel 0
         lineRGB[x] = lineRGB[srcPos[x]];
@@ -418,15 +420,15 @@
    *          logarithmic scaling level (1 = scale by 2, 2 = scale by 4, etc.)
    * @return the scaled image
    */
-  public static Image scaleImage20(final Image src, final int dif) {
+  public static Image scaleImage20(final Image src, final double dif) {
     return scaleImage20(src, -1, -1, dif);
   }
 
-  public static Image scaleImage20(final Image src, final int sourceX, final int sourceY, final int dif) {
+  public static Image scaleImage20(final Image src, final int sourceX, final int sourceY, final double dif) {
     final int dstWidth = src.getWidth();
     final int dstHeight = src.getHeight();
-    int srcWidth = dstWidth >> dif;
-    int srcHeight = dstHeight >> dif;
+    int srcWidth = (int) Math.ceil(dstWidth / Math.pow(2, dif));
+    int srcHeight = (int) Math.ceil(dstHeight / Math.pow(2, dif));
     if (srcWidth < 1) {
       srcWidth = 1;
     }
@@ -446,11 +448,11 @@
      * http://www.cs.helsinki.fi/group/goa/mallinnus/lines/bresenh.html
      */
     for (int x = 0; x < dstWidth; x++) {
-      srcPos[x] = srcX + (x >> dif);
+      srcPos[x] = srcX + (int) Math.floor((x / Math.pow(2, dif)));
     }
 
     for (int y = 0; y < dstHeight; y++) {
-      src.getRGB(lineRGB, 0, dstWidth, 0, srcY + (y >> dif), dstWidth, 1);
+      src.getRGB(lineRGB, 0, dstWidth, 0, srcY + (int) Math.floor((y / Math.pow(2, dif))), dstWidth, 1);
       for (int x = 0; x < dstWidth; x++) {
         lineRGB2[x] = lineRGB[srcPos[x]];
       }
--- /home/jbaubort/Bureau/SIG Android/maps_lib_src/maps_lib/src/com/nutiteq/BasicMapComponent.java	2010-07-28 19:35:22.000000000 +0200
+++ src/com/nutiteq/BasicMapComponent.java	2010-11-16 17:10:10.000000000 +0100
@@ -103,7 +103,7 @@
   private int displayX;
   private int displayY;
 
-  private MapPos middlePoint;
+  protected MapPos middlePoint;
 
   // tile display
   private int tileX;
@@ -131,7 +131,7 @@
   private ControlKeysHandler controlKeysHandler;
   private Cursor cursor;
 
-  private GeoMap displayedMap;
+  protected GeoMap displayedMap;
 
   private KmlServicesHandler kmlServicesHandler;
   private com.nutiteq.cache.Cache networkCache;
@@ -192,10 +192,10 @@
   private GeoMap[] tileSearchStrategy;
 
   private final LicenseKeyCheck licenseKeyCheck;
 
   private boolean paintingScreen;
-  private TileMapBounds tileMapBounds;
+  protected TileMapBounds tileMapBounds;
 
   private boolean mappingStarted;
 
@@ -826,7 +826,7 @@
     cleanMapBuffer();
     middlePoint = displayedMap.zoom(middlePoint, 1);
     tileMapBounds = displayedMap.getTileMapBounds(middlePoint.getZoom());
-    createZoomBufferAndUpdateScreen(-1, true);
+    createZoomBufferAndUpdateScreen(1, true, false);
   }
 
   /**
@@ -840,10 +840,15 @@
     cleanMapBuffer();
     middlePoint = displayedMap.zoom(middlePoint, -1);
     tileMapBounds = displayedMap.getTileMapBounds(middlePoint.getZoom());
-    createZoomBufferAndUpdateScreen(1, true);
+    createZoomBufferAndUpdateScreen(1, true, true);
+  }
+  
+  protected void createZoomBufferAndUpdateScreen(final double scale, final boolean needZoomDelay) {
+        createZoomBufferAndUpdateScreen(scale, needZoomDelay, false);
   }
 
-  private void createZoomBufferAndUpdateScreen(final int scaleDown, final boolean needZoomDelay) {
+  protected void createZoomBufferAndUpdateScreen(final double scale, final boolean needZoomDelay,
+        final boolean zoomOut) {
     // kind of a hack for pointer events. if map is dragged and pointer is
     // released outside painted area (when map is not full screen) the pointer
     // location values are not reset.
@@ -851,14 +856,13 @@
     pointerY = -1;
 
     fullScreenUpdate();
-    final int absScaleDown = (scaleDown > 0) ? scaleDown : -scaleDown;
     final Image frontImage = mapBuffer.getFrontImage();
-    final int scaledWidth = (scaleDown > 0) ? (frontImage.getWidth() >> absScaleDown) : frontImage
-        .getWidth();
-    final int scaledHeight = (scaleDown > 0) ? (frontImage.getHeight() >> absScaleDown)
-        : frontImage.getHeight();
-    final Image scaled = (scaleDown > 0) ? Tools.scaleImage05(frontImage, absScaleDown) : Tools
-        .scaleImage20(frontImage, absScaleDown);
+    final double scaledWidth = (zoomOut) ? (frontImage.getWidth() / Math.pow(2, scale))
+            : frontImage.getWidth();
+    final double scaledHeight = (zoomOut) ? (frontImage.getHeight() / Math.pow(2, scale))
+            : frontImage.getHeight();
+    final Image scaled = (zoomOut) ? Tools.scaleImage05(frontImage, scale) : Tools
+            .scaleImage20(frontImage, scale);
 
     zoomBufferX = middlePoint.getX() - displayCenterX;
     zoomBufferY = middlePoint.getY() - displayCenterY;
@@ -867,8 +871,8 @@
     zoomBufferGraphics.setColor(0xFFFFFFFF);
     zoomBufferGraphics.fillRect(0, 0, zoomBuffer.getWidth(), zoomBuffer.getHeight());
     if (scaledWidth > 0 && scaledHeight > 0) {
-      zoomBufferGraphics.drawImage(scaled, (zoomBuffer.getWidth() - scaledWidth) / 2, (zoomBuffer
-          .getHeight() - scaledHeight) / 2, Graphics.TOP | Graphics.LEFT);
+      zoomBufferGraphics.drawImage(scaled, (int)Math.ceil((zoomBuffer.getWidth() - scaledWidth) / 2), (int) Math.ceil((zoomBuffer
+          .getHeight() - scaledHeight) / 2), Graphics.TOP | Graphics.LEFT);
     }
 
     computeTilesToDisplay();
@@ -899,7 +903,7 @@
     mapMoved();
   }
 
-  private void cleanMapBuffer() {
+  protected void cleanMapBuffer() {
     fullScreenUpdate();
     paintMap(mapBuffer);
   }
