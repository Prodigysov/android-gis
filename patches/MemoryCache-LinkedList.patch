--- /home/jbaubort/Bureau/SIG Android/maps_lib_src/maps_lib/src/com/nutiteq/cache/MemoryCache.java	2010-11-23 10:44:36.000000000 +0100
+++ src/com/nutiteq/cache/MemoryCache.java	2010-12-06 11:29:08.000000000 +0100
@@ -1,7 +1,10 @@
 package com.nutiteq.cache;
 
-import java.util.Enumeration;
-import java.util.Hashtable;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Map.Entry;
 
 /**
  * <p>
@@ -15,21 +18,29 @@
  * </p>
  */
 public class MemoryCache implements Cache {
-  private final Hashtable cache;
-  private final int maxSize;
-  private CacheItem mru;
-  private CacheItem lru;
+  private LinkedHashMap<String, byte[]> cache;
   private int size;
+  private static final float loadFactor = 0.9f;
+  private static final int imageAvgSize = 25600; // Bytes
 
   /**
    * Create a new MemoryCache instance.
    * 
    * @param cacheSize
-   *          cache size in bytes.
+   *            cache size in bytes.
    */
-  public MemoryCache(final int cacheSize) {
-    maxSize = cacheSize;
-    cache = new Hashtable();
+  public MemoryCache(final int cs) {
+    final int cacheSize = (int) Math.ceil(cs / imageAvgSize / loadFactor) + 1;
+    cache = new LinkedHashMap<String, byte[]>(cacheSize, loadFactor, true) {
+      private static final long serialVersionUID = 1;
+      @Override protected boolean removeEldestEntry (Map.Entry<String, byte[]> eldest) {
+        if (size() > cacheSize) {
+          size -= eldest.getValue().length;
+          return true;
+        }
+        return false;
+      }
+    };
   }
 
   public void initialize() {
@@ -37,89 +48,28 @@
   }
 
   public void deinitialize() {
-
+    if (cache != null) {
+      cache.clear();
+    }
+    cache = null;
   }
 
   public byte[] get(final String cacheId) {
-    final CacheItem result = (CacheItem) cache.get(cacheId);
-
-    if (result == null) {
-      return null;
-    }
-
-    //make it the most recently used entry
-    if (mru != result) { //not already the MRU
-      if (lru == result) { // I'm the least recently used
-        lru = result.previous;
-      }
-
-      // Remove myself from the LRU list.
-      if (result.next != null) {
-        result.next.previous = result.previous;
-      }
-
-      result.previous.next = result.next;
-
-      // Add myself back in to the front.
-      mru.previous = result;
-      result.previous = null;
-      result.next = mru;
-      mru = result;
-    }
-
-    return result.data;
+    return (byte[]) cache.get(cacheId);
   }
 
   public void cache(final String cacheId, final byte[] data, final int cacheLevel) {
     if ((cacheLevel & CACHE_LEVEL_MEMORY) != CACHE_LEVEL_MEMORY || data == null || data.length == 0) {
       return;
     }
-
-    final byte[] existing = get(cacheId);
-    if (existing != null) {
-      // The key has already been used.  By calling get() we already promoted
-      // it to the MRU spot.  However, if the data has changed, we need to
-      // update it in the hash table.
-      //TODO jaanus : check also data content?
-      if (existing.length != data.length) {
-        final CacheItem i = (CacheItem) cache.get(cacheId);
-        i.data = data;
-      }
-    } else {
-      // cache miss
-      final CacheItem item = new CacheItem();
-      item.key = cacheId;
-      item.data = data;
-      item.next = mru;
-      item.previous = null;
-
-      if (cache.size() == 0) {
-        // then cache is empty
-        lru = item;
-      } else {
-        mru.previous = item;
-      }
-
-      mru = item;
-      cache.put(cacheId, item);
-
-      size += data.length;
-    }
-
-    while (size > maxSize) {
-      // Kick out the least recently used element.
-      cache.remove(lru.key);
-      size -= lru.data.length;
-
-      if (lru.previous != null) {
-        lru.previous.next = null;
-      }
-
-      lru = lru.previous;
-    }
+    size += data.length;
+    cache.put(cacheId, data);
   }
 
   public boolean contains(final String cacheKey) {
+    if (cache == null) {
+      return false;
+    }
     return cache.containsKey(cacheKey);
   }
 
@@ -131,23 +81,31 @@
     return contains(cacheKey);
   }
 
-  //TEST METHODS
+  // TEST METHODS
   protected int getCalculatedSize() {
     return size;
   }
 
   protected int getActualElementsSize() {
-    final Enumeration e = cache.elements();
+    final Collection<byte[]> e = (Collection<byte[]>) cache.values();
+    final Iterator<byte[]> i = e.iterator();
     int result = 0;
-    while (e.hasMoreElements()) {
-      final CacheItem item = (CacheItem) e.nextElement();
-      result += item.data.length;
+    while (i.hasNext()) {
+        final byte[] item = i.next();
+        result += item.length;
     }
-
     return result;
   }
 
   protected CacheItem getMRU() {
-    return mru;
+    CacheItem ci = new CacheItem();
+    Iterator<Entry<String, byte[]>> i = cache.entrySet().iterator();
+    Entry<String, byte[]> e = null;
+    while(i.hasNext()){
+        e = i.next();
+    }
+    ci.key = e.getKey();
+    ci.data = e.getValue();
+    return ci;
   }
 }
