--- maps_lib/src/com/nutiteq/utils/Utils.java	2010-05-10 10:22:04.000000000 +0200
+++ maps_lib-patched/src/com/nutiteq/utils/Utils.java	2010-11-09 15:57:15.000000000 +0100
@@ -184,13 +184,15 @@
     throw new IllegalArgumentException("Do not know the log2 from " + x);
   }
 
-  public static Image resizeImageAndCopyPrevious(final int newWidth, final int newHeight, final Image resized) {
+  public static Image resizeImageAndCopyPrevious(final int newWidth, final int newHeight, Image resized) {
     // TODO jaanus : if new is smaller can optimize with
     // createImage(Image image, int x, int y, int width, int height, int
     // transform)
     final Image result = Image.createImage(newWidth, newHeight);
     final Graphics g = result.getGraphics();
     g.drawImage(resized, (newWidth - resized.getWidth()) / 2, (newHeight - resized.getHeight()) / 2, Graphics.TOP | Graphics.LEFT);
+    resized.getBitmap().recycle();
+    resized = null;
     return result;
   }
--- maps_lib/src/com/nutiteq/BasicMapComponent.java  2010-11-09 10:32:42.000000000 +0100
+++ maps_lib-patched/src/com/nutiteq/BasicMapComponent.java  2010-11-09 10:32:21.000000000 +0100
@@ -1963,10 +1988,18 @@
     if (!mappingStarted) {
       return;
     }
+    
+    if (screenBuffer != null) {
+        screenBuffer.getBitmap().recycle();
+        screenBuffer = null;
+    }
+    screenBufferGraphics = null;
+    screenCache.deinitialize();
 
     mappingStarted = false;
 
-    panning.quit();
+    if (panning != null) {
+        panning.quit();
+    }
 
     if (locationSource != null) {
       locationSource.quit();
--- maps_lib/src/com/nutiteq/components/MapTile.java	2010-11-09 16:46:02.000000000 +0100
+++ maps_lib-patched/src/com/nutiteq/components/MapTile.java	2010-11-09 16:44:24.000000000 +0100
@@ -124,7 +124,7 @@
      * Not part of public API
      */
     public void setImagesData(final byte[][] data) {
-        if (data == null || data.length == 0 || data[0].length == 0) {
+        if (data == null || data.length == 0 || data[0] == null || data[0].length == 0) {
             failCount++;
             Log.error("Could not retrieve " + getIDString());
             requestor.tileRetrieved(this);
@@ -170,12 +170,16 @@
                     }
                 }
                 imageGraphics.drawImage(tmp, 0, 0, Graphics.TOP | Graphics.LEFT);
+                tmp.getBitmap().recycle();
+                tmp = null;
             }
 
             if (overlayData != null) {
                 for (int i = 0; i < overlayData.length; i++) {
-                    final Image tmp = Image.createImage(overlayData[i], 0, overlayData[i].length);
+                    Image tmp = Image.createImage(overlayData[i], 0, overlayData[i].length);
                     imageGraphics.drawImage(tmp, 0, 0, Graphics.TOP | Graphics.LEFT);
+                    tmp.getBitmap().recycle();
+                    tmp = null;
                 }
             }
             return tileImage;
--- maps_lib/src/com/nutiteq/components/ImageBuffer.java	2009-10-28 16:28:34.000000000 +0100
+++ maps_lib-patched/src/com/nutiteq/components/ImageBuffer.java	2010-11-15 10:15:24.000000000 +0100
@@ -48,6 +48,11 @@
   }
 
   public void clean() {
+    for (int i = 0; i < bufferImages.length; i++) {
+        if (bufferImages[i] != null) {
+            bufferImages[i].getBitmap().recycle();
+        }
+    }
     bufferImages = null;
     bufferGraphics = null;
   }

--- maps_lib/src/com/nutiteq/cache/MemoryCache.java	2010-11-15 12:14:33.000000000 +0100
+++ maps_lib-patched/src/com/nutiteq/cache/MemoryCache.java	2010-11-16 12:10:25.000000000 +0100
@@ -15,7 +15,7 @@
  * </p>
  */
 public class MemoryCache implements Cache {
-    private final Hashtable cache;
+    private Hashtable<String, CacheItem> cache;
     private final int maxSize;
     private CacheItem mru;
     private CacheItem lru;
@@ -29,7 +29,7 @@
      */
     public MemoryCache(final int cacheSize) {
         maxSize = cacheSize;
-        cache = new Hashtable();
+        cache = new Hashtable<String, CacheItem>();
     }
 
     public void initialize() {
@@ -37,7 +37,12 @@
     }
 
     public void deinitialize() {
-
+        if (cache != null) {
+            cache.clear();
+        }
+        cache = null;
+        mru = null;
+        lru = null;
     }
 
     public byte[] get(final String cacheId) {
@@ -122,6 +127,9 @@
     }
 
     public boolean contains(final String cacheKey) {
+        if (cache == null) {
+            return false;
+        }
         return cache.containsKey(cacheKey);
     }
 
@@ -139,7 +147,7 @@
     }
 
     protected int getActualElementsSize() {
-        final Enumeration e = cache.elements();
+        final Enumeration<CacheItem> e = cache.elements();
         int result = 0;
         while (e.hasMoreElements()) {
             final CacheItem item = (CacheItem) e.nextElement();
