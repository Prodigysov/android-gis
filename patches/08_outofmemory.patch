--- src/com/nutiteq/BasicMapComponent.java
+++ src/com/nutiteq/BasicMapComponent.java
@@ -131,10 +131,10 @@
   private ControlKeysHandler controlKeysHandler;
   private Cursor cursor;
 
-  private GeoMap displayedMap;
+  protected GeoMap displayedMap;
 
   private KmlServicesHandler kmlServicesHandler;
-  private com.nutiteq.cache.Cache networkCache;
+  protected com.nutiteq.cache.Cache networkCache;
 
   private final TasksRunner taskRunner;
 
@@ -1964,10 +1964,19 @@ public class BasicMapComponent extends BaseMapComponent implements MapTilesRequestor, Pannable,
       return;
     }
 
-    mappingStarted = false;
-
-    panning.quit();
-
+    if (screenBuffer != null) {
+        screenBuffer.getBitmap().recycle();
+        screenBuffer = null;
+    }
+    screenBufferGraphics = null;
+    screenCache.deinitialize();
+
+    mappingStarted = false;
+
+    if (panning != null) {
+        panning.quit();
+    }
+
     if (locationSource != null) {
       locationSource.quit();
     }
--- src/com/nutiteq/components/ImageBuffer.java
+++ src/com/nutiteq/components/ImageBuffer.java
@@ -48,6 +48,11 @@ public class ImageBuffer {
   }
 
   public void clean() {
+    for (int i = 0; i < bufferImages.length; i++) {
+      if (bufferImages[i] != null) {
+        bufferImages[i].getBitmap().recycle();
+      }
+    }
     bufferImages = null;
     bufferGraphics = null;
   }
--- src/com/nutiteq/components/MapTile.java
+++ src/com/nutiteq/components/MapTile.java
@@ -123,7 +123,7 @@ public class MapTile {
    * Not part of public API
    */
   public void setImagesData(final byte[][] data) {
-    if (data == null || data.length == 0 || data[0].length == 0) {
+    if (data == null || data.length == 0 || data[0] == null || data[0].length == 0) {
       failCount++;
       Log.error("Could not retrieve " + getIDString());
       requestor.tileRetrieved(this);
@@ -169,12 +169,16 @@ public class MapTile {
           }
         }
         imageGraphics.drawImage(tmp, 0, 0, Graphics.TOP | Graphics.LEFT);
+        tmp.getBitmap().recycle();
+        tmp = null;
       }
 
       if (overlayData != null) {
         for (int i = 0; i < overlayData.length; i++) {
-          final Image tmp = Image.createImage(overlayData[i], 0, overlayData[i].length);
+          Image tmp = Image.createImage(overlayData[i], 0, overlayData[i].length);
           imageGraphics.drawImage(tmp, 0, 0, Graphics.TOP | Graphics.LEFT);
+          tmp.getBitmap().recycle();
+          tmp = null;
         }
       }
       return tileImage;
--- src/com/nutiteq/utils/Utils.java
+++ src/com/nutiteq/utils/Utils.java
@@ -184,13 +184,15 @@ public class Utils {
     throw new IllegalArgumentException("Do not know the log2 from " + x);
   }
 
-  public static Image resizeImageAndCopyPrevious(final int newWidth, final int newHeight, final Image resized) {
+  public static Image resizeImageAndCopyPrevious(final int newWidth, final int newHeight, Image resized) {
     // TODO jaanus : if new is smaller can optimize with
     // createImage(Image image, int x, int y, int width, int height, int
     // transform)
     final Image result = Image.createImage(newWidth, newHeight);
     final Graphics g = result.getGraphics();
     g.drawImage(resized, (newWidth - resized.getWidth()) / 2, (newHeight - resized.getHeight()) / 2, Graphics.TOP | Graphics.LEFT);
+    resized.getBitmap().recycle();
+    resized = null;
     return result;
   }
 
--- src/com/nutiteq/android/RepaintHandler.java	2009-10-28 16:28:36.000000000 +0100
+++ src/com/nutiteq/android/RepaintHandler.java	2010-11-16 16:27:48.000000000 +0100
@@ -12,7 +12,9 @@
 
   @Override
   public void handleMessage(final Message msg) {
-    mapView.invalidate();
+    if (mapView != null) {
+        mapView.invalidate();
+    }
     super.handleMessage(msg);
   }
 
--- src/com/mgmaps/cache/ScreenCache.java	2010-11-23 10:44:36.000000000 +0100
+++ src/com/mgmaps/cache/ScreenCache.java	2011-01-31 15:45:34.564297534 +0100
@@ -59,6 +59,17 @@
     resize(n);
   }
 
+  public void deinitialize() {
+    for (int i = 0; i < images.length; i++) {
+      if (images[i] != null) {
+        images[i].getBitmap().recycle();
+      }
+    }
+    tiles = null;
+    images = null;
+    valid = null;
+  }
+
   /**
    * Resize the screen cache when switching full screen.
    * 
@@ -100,9 +111,10 @@
    *          copy of the map center, used for synchronization
    */
   public void paint(final Graphics g, final int i, final MapPos centerCopy, final int screenCenterX, final int screenCenterY) {
-    if (images[i] == null) {
+    if (images[i] == null || !valid[i]) {
       //TODO jaanus : why does this sometimes happen with streamed tiles?
       Log.debug(">>>>>>>>>>>>>>>>>>>>>>> SC: null image!");
+      valid[i] = false; //FIXME
       images[i] = tiles[i].getMap().getMissingTileImage();
     }
     final int left = tiles[i].getX() - centerCopy.getX() + screenCenterX;
@@ -119,7 +131,7 @@
    */
   public int find(final MapTile t) {
     for (int i = 0; i < size; i++) {
-      if (valid[i] && tiles[i].equals(t)) {
+      if (valid[i] && images[i] != null && tiles[i] != null && tiles[i].equals(t)) {
         return i;
       }
     }
@@ -204,6 +216,9 @@
   public void setImageProcessor(final ImageProcessor processor) {
     imageProcessor = processor;
     for (int i = 0; i < size; i++) {
+      if (images[i] != null) {
+        images[i].getBitmap().recycle();
+      }
       valid[i] = false;
       tiles[i] = null;
       images[i] = null;
